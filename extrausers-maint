#! /usr/bin/env python3
from os.path import join, exists
import os
import sys
import socket


def load_db(db_name):
    import yaml
    with open(db_name, "r") as dbf:
        yaml_text = dbf.read()

    return yaml.load(yaml_text, Loader=yaml.SafeLoader)


def save_db(db_name, db):
    import yaml
    with open(db_name, "w") as dbf:
        dbf.write(yaml.dump(db, default_flow_style=False, indent=4))


def get_leases(udata):
    leases = udata.get("leases")
    if leases is None:
        leases = [
                {
                    "expires": None,
                    "justification": udata.get("remarks"),
                    }
                ]

    return leases


def is_user_active(name, udata):
    if udata.get("disabled", False):
        return False

    result = False

    import datetime
    today = datetime.date.today()

    for lease in get_leases(udata):
        if not set(lease.keys()) <= set(["justification", "expires"]):
            raise ValueError(f"leases for user {name} has unrecognized "
                    "keys")

        expires = lease.get("expires")
        if not (expires is None or isinstance(expires, datetime.date)):
            raise ValueError(f"'expires' in leases for user {name} "
                    "is not a datetime or null")

        if expires is None or today <= expires:
            result = True
            break

    return result


# {{{ update

def cmd_update(args):
    db = load_db(args.db)

    # check that access is specifically given to this host
    # ...unless the machine is not in the restricted list
    checkaccess = True
    thishost = socket.gethostname()
    if thishost not in db.get("restricted_access_hosts", []):
        checkaccess = False

    home_root = db["home_root"]
    extrausers_root = db["extrausers_root"]
    default_shell = db.get("default_shell")

    if args.with_shared:
        """
        shared_root : location of the NFS shared mount point
                      e.g. /shared
                      this is an absolute path
        shared_local : location of the local symlink to shared_root
                       e.g. shared will make $HOME/shared
                       this is a relative path
        """
        try:
            shared_root = db["shared_root"]
            shared_local = db["shared_local"]
        except Exception:
            raise KeyError("You need to set shared_root and shared_local" +
                           " in the yml")

    group_members = {}
    gids = {}

    passwd_lines = []
    shadow_lines = []

    # {{{ check for multiply assigned UIDs

    taken_uids = set()
    for user, udata in db["users"].items():
        uid = udata["uid"]

        if uid in taken_uids:
            raise ValueError(f"UID {uid} is assigned multiple times")

        taken_uids.add(uid)

    # }}}

    for user, udata in db["users"].items():
        home_dir = join(home_root, user)

        if not is_user_active(user, udata):
            if exists(home_dir):
                os.chown(home_dir, 0, 0)  # set ownership to root
                os.chmod(home_dir, 0o000)  # no access

            continue

        # check to see if user is has restricted access
        # ...otherwise move on to next user
        if checkaccess:
            if thishost not in udata.get("allowed_access_to_hosts", []):
                continue

        uid = udata["uid"]
        gid = udata.get("gid", uid)

        passwd_lines.append(":".join([
            user,
            "x",
            str(uid),
            str(gid),
            udata["name"],
            home_dir,
            udata.get("shell", default_shell)]))

        shadow_lines.append(":".join([
            user,
            udata.get("crypted_password", "x"),
            "16289",
            "0",
            "99999",
            "7",
            "",
            "",
            ""]))

        for grp in udata.get("groups", []):
            group_members[grp] = group_members.get(grp, []) + [user]

        gids[user] = gid

        def make_and_own(d):
            if not exists(d):
                os.makedirs(d)
                if not args.no_chown:
                    os.chown(d, uid, gid)
            else:
                if not args.no_chown:
                    st = os.stat(d)
                    if (st.st_uid, st.st_gid, st.st_mode & 0o777) == (0, 0, 0):
                        # previously disabled, reenable
                        os.chown(d, uid, gid)
                        os.chmod(d, 0o755)
                    else:
                        if st.st_uid != uid:
                            raise ValueError(
                                    f"{d} is owned by uid {st.st_uid}, should be {uid}")
                        if st.st_gid != gid:
                            raise ValueError(
                                    f"{d} is owned by gid {st.st_gid}, should be {gid}")

        ssh_dir = join(home_dir, ".ssh")

        make_and_own(home_dir)
        make_and_own(ssh_dir)

        keys_file = join(ssh_dir, "authorized_keys")

        with open(keys_file, "w") as keysf:
            keysf.write("# automatically generated by extrausers-maint\n")
            keysf.write("# WARNING! Do not edit--file will be overwritten.\n")
            keysf.write("\n")
            for l in udata.get("ssh_keys", []):
                keysf.write(l.strip() + "\n")

        if not args.no_chown:
            os.chown(keys_file, uid, gid)
            os.chmod(keys_file, 0o400)

        if args.with_shared:
            # this makes (for example)
            # /shared/username
            # and
            # /home/username/shared
            old_shared_root_dir = join(shared_root, user)
            shared_root_dir = join(shared_root, "home", user)
            shared_local_dir = join(home_dir, shared_local)

            if args.nfs_server:
                make_and_own(shared_root_dir)

            # migrate from old location
            if (os.path.islink(shared_local_dir)
                    and os.readlink(shared_local_dir) == old_shared_root_dir):
                os.unlink(shared_local_dir)

            # check for the symlink
            if not os.path.exists(shared_local_dir):
                # check if mounted...otherwise ignore
                if (os.path.ismount(os.path.abspath(shared_root))
                        or args.nfs_server):

                    try:
                        os.symlink(shared_root_dir, shared_local_dir)
                    except OSError:
                        print("your local shared cannot be made for %" % user)

            if os.path.islink(shared_local_dir):
                os.lchown(shared_local_dir, uid, gid)

    for grp, gdata in db["groups"].items():
        gids[grp] = gdata["gid"]
        group_members[grp] = (
            group_members.get(grp, [])
            + gdata.get("members", []))

    group_lines = []

    for grp in gids:
        members = group_members.get(grp, [])
        gid = gids[grp]

        group_lines.append(":".join([
            grp,
            "x",
            str(gid),
            ",".join(members)]))

    with open(join(extrausers_root, "passwd"), "w") as outf:
        outf.write("\n".join(passwd_lines) + "\n")

    shadow_file = join(extrausers_root, "shadow")
    with open(shadow_file, "w") as outf:
        outf.write("\n".join(shadow_lines) + "\n")
    os.chmod(shadow_file, 0o600)

    with open(join(extrausers_root, "group"), "w") as outf:
        outf.write("\n".join(group_lines) + "\n")

# }}}


# {{{ change_password

def cmd_change_password(args):
    from crypt import crypt
    from base64 import b64encode
    salt = b64encode(os.urandom(16)).decode()
    import getpass
    pw = getpass.getpass()
    pw_confirm = getpass.getpass()

    if pw != pw_confirm:
        raise RuntimeError("passwords do not match")

    crypted_password = crypt(pw, "$6$%s$" % salt)

    db = load_db(args.db)
    db["users"][args.user]["crypted_password"] = crypted_password
    save_db(args.db, db)

# }}}


def find_taken_uids(db):
    return set(udata["uid"] for udata in db["users"].values())


def find_next_uid(db):
    return max(find_taken_uids(db)) + 1


def cmd_find_next_uid(args):
    db = load_db(args.db)
    print("New UID:", find_next_uid(db))


def cmd_print_emails(args):
    db = load_db(args.db)
    for name, udata in db["users"].items():
        if is_user_active(name, udata):
            print(udata["email"])


# {{{ merge

def cmd_merge(args):
    db = load_db(args.db)
    merged_db = load_db(args.merged_db)

    db_users = db["users"]

    for merged_username, merged_udata in merged_db["users"].items():
        if merged_username not in db_users:
            merged_udata = merged_udata.copy()
            if "uid" not in merged_udata:
                merged_udata["uid"] = find_next_uid(db)
            else:
                if merged_udata["uid"] in find_taken_uids(db):
                    raise ValueError(
                            f"UID for new user '{merged_username}' "
                            "is already in use")

            db_users[merged_username] = merged_udata
            continue

        db_udata = db_users[merged_username]

        # {{{ leases

        # Don't create 'leases' if it doesn't exist in either DB.
        # Don't disturb DB 'leases' if it's not in the merged DB.
        if "leases" in merged_udata:
            db_leases = get_leases(db_udata)[:]

            for merged_lease in merged_udata["leases"]:
                found_db_lease = None
                for i, db_lease in enumerate(db_leases):
                    if db_lease["justification"] == merged_lease["justification"]:
                        found_db_lease = i

                if found_db_lease is not None:
                    db_leases[found_db_lease] = merged_lease
                else:
                    db_leases.append(merged_lease)
            db_udata["leases"] = db_leases

        # }}}

        def merge_list(name):
            # Don't create *name* if it doesn't exist in either DB.
            # Don't disturb DB *name* if it's not in the merged DB.
            if name in merged_udata:
                db_list = db_udata.get(name, [])
                db_list.extend(merged_udata[name])
                db_list = list(set(item.strip() for item in db_list))
                db_udata[name] = db_list

        merge_list("groups")
        merge_list("allowed_access_to_hosts")
        merge_list("ssh_keys")

        if "name" in merged_udata:
            db_udata["name"] = merged_udata["name"]

        if "email" in merged_udata:
            db_udata["email"] = merged_udata["email"]

        if "shell" in merged_udata:
            db_udata["shell"] = merged_udata["shell"]

        if "uid" in merged_udata:
            if merged_udata["uid"] != db_udata["uid"]:
                raise ValueError(f"UID for {merged_username} does not "
                        "match UID in database")

    save_db(args.db, db)

# }}}


def main():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument("--db", metavar="FILE", default="userdb.yml")
    subp = parser.add_subparsers()

    parser_update = subp.add_parser("update")
    parser_update.add_argument("--no-chown", action="store_true")
    parser_update.add_argument("--with-shared", action="store_true",
                               help="Set this to update a shared folder" +
                                    " in the user directory")
    parser_update.add_argument("--nfs-server", action="store_true",
                               help="Set this to update the shared folder" +
                                    " on the nfs server")
    parser_update.set_defaults(func=cmd_update)

    parser_passwd = subp.add_parser("passwd")
    parser_passwd.add_argument("user")
    parser_passwd.set_defaults(func=cmd_change_password)

    parser_next_uid = subp.add_parser("next-uid")
    parser_next_uid.set_defaults(func=cmd_find_next_uid)

    parser_next_uid = subp.add_parser("emails")
    parser_next_uid.set_defaults(func=cmd_print_emails)

    parser_merge = subp.add_parser("merge")
    parser_merge.add_argument("--merged-db", metavar="FILE", default="userdb2.yml")
    parser_merge.set_defaults(func=cmd_merge)

    args = parser.parse_args()

    if not hasattr(args, "func"):
        parser.print_help()
        sys.exit(1)

    args.func(args)


if __name__ == "__main__":
    main()

# vim: foldmethod=marker
